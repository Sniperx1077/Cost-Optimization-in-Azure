üí° Azure Cosmos DB Cost Optimization for Billing Records
üîÑ Current Scenario
We have a serverless architecture in Azure where one of our services stores billing records in Azure Cosmos DB (serverless mode).

Record Size: ~300 KB

Total Records: Over 2 million

Access Pattern: Read-heavy

Observation: Records older than 3 months are rarely accessed

Problem: Rapidly growing Cosmos DB costs due to storage and throughput

üéØ Optimization Goals
‚úÖ No data loss

‚úÖ No downtime during migration

‚úÖ No changes to the existing API contracts

‚úÖ Maintain SLA-level access latency (seconds for archived records)

‚úÖ Use simple, serverless, and cost-effective Azure components

‚úÖ Optimization Strategy
1. Data Tiering ‚Äì Hot & Cold
Hot Tier (Cosmos DB): Stores billing records from the last 3 months.

Cold Tier (Azure Blob Storage ‚Äì Archive Tier): Stores archived records >3 months old as compressed JSON/Parquet.

2. Intelligent Routing Layer
A central Azure Function (or API layer) determines the data source:

If record.timestamp <= 90 days: fetch from Cosmos DB

Else: fetch from Azure Blob Storage

3. Automated Archival Job
A Timer Triggered Azure Function runs daily to:

Scan Cosmos DB for records older than 3 months

Serialize and write them to Blob Storage

Delete them from Cosmos DB to reduce cost

üß† Architecture Overview
----------------------------------------------------------------------------pgsql-----------------------------------------------------------------------------------
[Client / API Request]
        |
        | HTTP GET /billing/{id}
        v
[Azure Function: GetBillingRecord] ‚îÄ‚îÄ> Query Cosmos DB (if recent)
        |
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ> If not found ‚îÄ‚îÄ> Query Blob Storage (archive)
                                       |
                              [Blob in JSON/Parquet]
--------------------------------------------------------------------------sql----------------------------------------------------------------------------

                [Timer Trigger - Azure Function: ArchiveBillingRecords]
                        Cosmos DB ‚Üí Blob Storage ‚Üí Cosmos DB Deletion
                               (Records older than 3 months)
üß™ Pseudocode Snippets
‚òÅÔ∏è Read Routing Function
---------------------------------------------------------------------------python--------------------------------------------------------------------------
def get_billing_record(record_id):
    metadata = cosmos_db.get_metadata(record_id)
    if metadata['timestamp'] > datetime.utcnow() - timedelta(days=90):
        return cosmos_db.get_record(record_id)
    else:
        return blob_storage.get(record_id)
‚òÅÔ∏è Archival Function (Timer Trigger)
---------------------------------------------------------------------------python----------------------------------------------------------------------------
def archive_old_records():
    cutoff = datetime.utcnow() - timedelta(days=90)
    old_records = cosmos_db.query("SELECT * FROM c WHERE c.timestamp < @cutoff", {"@cutoff": cutoff})

    for record in old_records:
        blob_storage.save_as_parquet(record)
        cosmos_db.delete(record['id'])
üìÅ Repo Structure Suggestion
pgsql
azure-cosmos-cost-optimization/
‚îú‚îÄ‚îÄ function-archive/
‚îÇ   ‚îî‚îÄ‚îÄ archive_old_records.py
‚îú‚îÄ‚îÄ function-routing/
‚îÇ   ‚îî‚îÄ‚îÄ get_billing_record.py
‚îú‚îÄ‚îÄ blob-utils/
‚îÇ   ‚îî‚îÄ‚îÄ blob_helpers.py
‚îú‚îÄ‚îÄ templates/
‚îÇ   ‚îî‚îÄ‚îÄ billing-record-schema.json
‚îú‚îÄ‚îÄ README.md
